service: hithlum
frameworkVersion: "3"

provider:
  name: aws
  region: us-east-1
  runtime: nodejs14.x
  stage: ${opt:stage}
  environment:
    TABLE: ${self:service}-${opt:stage}-table
    ARTICLE_QUEUE:
      Ref: articleQueue
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource:
            Fn::GetAtt: [articleQueue, Arn]

        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE}/index/*

plugins:
  - serverless-esbuild
  - serverless-s3-sync
  - serverless-plugin-conditional-functions
  - serverless-offline

custom:
  global: ${file(./global.yml):global}
  siteBucketName: ${self:service}-${opt:stage}-site
  s3Sync:
    - bucketName: ${self:custom.siteBucketName}
      localDir: ../frontend/dist

functions:
  articleConsumer:
    name: ${self:service}-${opt:stage}-article-consumer
    handler: function/article-consumer.main
    events:
      - sqs:
          arn:
            Fn::GetAtt: [articleQueue, Arn]

  hello:
    name: ${self:service}-${opt:stage}-hello
    handler: function/hello.main
    events:
      - httpApi:
          path: /hello
          method: get

  graphql:
    name: ${self:service}-${opt:stage}-graphql
    handler: function/graphql/graphql.main
    environment:
      STAGE: ${self:provider.stage}
      MANDOS_URL: ${self:custom.global.mandosUrl.${self:provider.stage}}
    events:
      - httpApi:
          path: /graphql
          method: post

  codegen:
    name: ${self:service}-${opt:stage}-codegen
    handler: function/graphql/codegen.main
    enabled: '"${self:provider.stage}" == "local"'
    environment:
      STAGE: ${self:provider.stage}
      MANDOS_URL: ${self:custom.global.mandosUrl.${self:provider.stage}}
    events:
      - httpApi:
          path: /codegen
          method: post

resources:
  Resources:
    articleQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${opt:stage}-articleQueue

    dynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.TABLE}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: gsi1pk
            AttributeType: S
          - AttributeName: gsi1sk
            AttributeType: S
          - AttributeName: gsi2pk
            AttributeType: S
          - AttributeName: gsi2sk
            AttributeType: S
          - AttributeName: gsi3pk
            AttributeType: S
          - AttributeName: gsi3sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: gsi1
            KeySchema:
              - AttributeName: gsi1pk
                KeyType: HASH
              - AttributeName: gsi1sk
                KeyType: RANGE
            Projection:
              ProjectionType: "ALL"
          - IndexName: gsi2
            KeySchema:
              - AttributeName: gsi2pk
                KeyType: HASH
              - AttributeName: gsi2sk
                KeyType: RANGE
            Projection:
              ProjectionType: "ALL"
          - IndexName: gsi3
            KeySchema:
              - AttributeName: gsi3pk
                KeyType: HASH
              - AttributeName: gsi3sk
                KeyType: RANGE
            Projection:
              ProjectionType: "ALL"

    siteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.siteBucketName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html

    siteS3AccessPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: siteBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.siteBucketName}/*

    siteCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: ${self:custom.siteBucketName}.s3.amazonaws.com
              Id: ReactApp
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
          Enabled: "true"
          DefaultRootObject: index.html
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: ReactApp
            ForwardedValues:
              QueryString: "false"
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
